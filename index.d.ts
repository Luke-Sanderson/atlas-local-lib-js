/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Client {
  static connect(): Client
  createDeployment(createDeplomentOptions: CreateDeploymentOptions): Promise<Deployment>
  listDeployments(): Promise<Array<Deployment>>
  deleteDeployment(deploymentName: string): Promise<void>
  getDeployment(deploymentName: string): Promise<Deployment>
  getConnectionString(options: GetConnectionStringOptions): Promise<string>
}

export declare const enum BindingType {
  Loopback = 'Loopback',
  AnyInterface = 'AnyInterface',
  Specific = 'Specific'
}

export interface CreateDeploymentOptions {
  name?: string
  image?: string
  mongodbVersion?: string
  waitUntilHealthy?: boolean
  waitUntilHealthyTimeout?: number
  creationSource?: CreationSource
  localSeedLocation?: string
  mongodbInitdbDatabase?: string
  mongodbInitdbRootPasswordFile?: string
  mongodbInitdbRootPassword?: string
  mongodbInitdbRootUsernameFile?: string
  mongodbInitdbRootUsername?: string
  mongotLogFile?: string
  runnerLogFile?: string
  doNotTrack?: boolean
  telemetryBaseUrl?: string
  mongodbPortBinding?: MongoDBPortBinding
}

export interface CreationSource {
  type: CreationSourceType
  source: string
}

export declare const enum CreationSourceType {
  AtlasCLI = 'AtlasCLI',
  Container = 'Container',
  MCPServer = 'MCPServer',
  Other = 'Other'
}

export interface Deployment {
  containerId: string
  name?: string
  state: State
  portBindings?: MongoDBPortBinding
  mongodbType: MongodbType
  mongodbVersion: string
  creationSource?: CreationSource
  localSeedLocation?: string
  mongodbInitdbDatabase?: string
  mongodbInitdbRootPasswordFile?: string
  mongodbInitdbRootPassword?: string
  mongodbInitdbRootUsernameFile?: string
  mongodbInitdbRootUsername?: string
  mongotLogFile?: string
  runnerLogFile?: string
  doNotTrack?: string
  telemetryBaseUrl?: string
}

export interface GetConnectionStringOptions {
  containerIdOrName: string
  dbUsername?: string
  dbPassword?: string
}

export interface MongoDbPortBinding {
  type: BindingType
  ip: string
  port?: number
}

export declare const enum MongodbType {
  Community = 'Community',
  Enterprise = 'Enterprise'
}

export declare const enum State {
  Created = 'Created',
  Dead = 'Dead',
  Exited = 'Exited',
  Paused = 'Paused',
  Removing = 'Removing',
  Restarting = 'Restarting',
  Running = 'Running'
}
